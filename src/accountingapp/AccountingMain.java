/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package accountingapp;


import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.*;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author yazeed
 */
public class AccountingMain extends javax.swing.JFrame implements Printable {

    //main Interface width and height
   private final int browseFrameWidth = 760 + 10,browseFrameHeight = 390 + 10;
  
   // incoming dialog width , and height
   private final int incomingDialogWidth =275 + 10,incomingDialogHeight =360 + 10  ;

   // outgoing dialog width , and height
   private final int outgoingDialogWidth =248 + 10,outgoingDialogHeight =293 + 10;
   
   //full report dialog width , and height
   private final int fullReportDialogWidth =  308 + 10  , fullReportDialogHeight =  300  + 10 ;
  
   
   // the row id for database , not table !!
   private int rowIdIncoming = -1,rowIdOutgoing = -1;
  
   // the row id for table , not database !!
   private int rowIncoming = -1,rowOutgoing = -1;
   
   //total for outgoing and incoming
   public static int totalIncomingDouble = -1,totalOutgoingDouble = -1;
 
    int[] pageBreaks;  // array of page break line positions.
   
    /* Synthesise some sample lines of text */
    String[] textLines;
  
    public AccountingMain() {
        initComponents();
        setTitles();
        setTableContentIncoming();
        setTableContentOutgoing();
        this.setRightClickListener();
        rowIdIncoming = getSelectedRowIdIncoming();//set up the listener
        rowIdOutgoing = getSelectedRowIdOutgoing();//set up the listener
        rowIncoming = getSelectedRowIncoming();//set up the listener
        rowOutgoing = getSelectedRowOutgoing();//set up the listener
        browseFrame.setResizable(false);//can't resize the main interface , because it will be horrible if someone did
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        incomingDialog = new javax.swing.JDialog();
        amountIncoming = new javax.swing.JTextField();
        isPayedIncoming = new javax.swing.JComboBox();
        categoryIncoming = new javax.swing.JComboBox();
        noteIncoming = new javax.swing.JTextField();
        addIncoming = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        payMethodIncoming = new javax.swing.JComboBox();
        outgoingDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        amountOutgoing = new javax.swing.JTextField();
        addOutgoingDialog = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        reasonOutgoing = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        noteOutgoing = new javax.swing.JTextField();
        browseFrame = new javax.swing.JFrame();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        incomingTable = new javax.swing.JTable();
        totalIncoming = new javax.swing.JLabel();
        dailyIncoming = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outgoingTable = new javax.swing.JTable();
        totalOutgoing = new javax.swing.JLabel();
        dailyOutgoing = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addBill2 = new javax.swing.JButton();
        addOutGoing2 = new javax.swing.JButton();
        fullReportBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        fullReportDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        textFullReport = new javax.swing.JTextArea();
        printFullReport = new javax.swing.JButton();
        addBill = new javax.swing.JButton();
        browseBtn = new javax.swing.JButton();
        addOutGoing = new javax.swing.JButton();
        about = new javax.swing.JLabel();

        incomingDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        incomingDialog.setResizable(false);

        amountIncoming.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        amountIncoming.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        amountIncoming.setToolTipText("المبلغ");
        amountIncoming.setDragEnabled(true);
        amountIncoming.setName(""); // NOI18N
        amountIncoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               
            }
        });

        isPayedIncoming.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        isPayedIncoming.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "مدفوعة", "غير مدفوعة" }));

        categoryIncoming.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        categoryIncoming.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ورد", "علب", "تغليف", "كوشة" }));

        noteIncoming.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        noteIncoming.setToolTipText("ملاحظة إضافية");

        addIncoming.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        addIncoming.setText("إضافة");
        addIncoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIncomingActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel1.setText("المبلغ");

        jLabel2.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel2.setText("نوع السلعة");

        jLabel3.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel3.setText("مدفوعة أم لا");

        jLabel4.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel4.setText("ملاحظة إضافية");

        jLabel9.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel9.setText("طريقة الدفع");

        payMethodIncoming.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        payMethodIncoming.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "كاش", "شبكة" }));

        javax.swing.GroupLayout incomingDialogLayout = new javax.swing.GroupLayout(incomingDialog.getContentPane());
        incomingDialog.getContentPane().setLayout(incomingDialogLayout);
        incomingDialogLayout.setHorizontalGroup(
            incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(incomingDialogLayout.createSequentialGroup()
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(amountIncoming, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(noteIncoming)
                    .addComponent(isPayedIncoming, javax.swing.GroupLayout.Alignment.TRAILING, 0, 168, Short.MAX_VALUE)
                    .addComponent(payMethodIncoming, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(incomingDialogLayout.createSequentialGroup()
                        .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(incomingDialogLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel1))
                            .addGroup(incomingDialogLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel3))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(incomingDialogLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(incomingDialogLayout.createSequentialGroup()
                .addComponent(categoryIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(0, 34, Short.MAX_VALUE))
            .addGroup(incomingDialogLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(addIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        incomingDialogLayout.setVerticalGroup(
            incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(incomingDialogLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isPayedIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(28, 28, 28)
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(payMethodIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(incomingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(noteIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addIncoming)
                .addGap(24, 24, 24))
        );

        amountIncoming.getAccessibleContext().setAccessibleName("");

        jLabel5.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel5.setText("المبلغ:");

        amountOutgoing.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        amountOutgoing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
            }
        });

        addOutgoingDialog.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        addOutgoingDialog.setText("إضافة");
        addOutgoingDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOutgoingDialogActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel6.setText("السبب:");

        reasonOutgoing.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        reasonOutgoing.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "شراء ورد" }));

        jLabel7.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel7.setText("ملاحظة إضافية:");

        noteOutgoing.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        javax.swing.GroupLayout outgoingDialogLayout = new javax.swing.GroupLayout(outgoingDialog.getContentPane());
        outgoingDialog.getContentPane().setLayout(outgoingDialogLayout);
        outgoingDialogLayout.setHorizontalGroup(
            outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outgoingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outgoingDialogLayout.createSequentialGroup()
                        .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reasonOutgoing, 0, 169, Short.MAX_VALUE)
                            .addComponent(amountOutgoing))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outgoingDialogLayout.createSequentialGroup()
                        .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(outgoingDialogLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(addOutgoingDialog))
                            .addComponent(noteOutgoing))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(6, 6, 6))))
        );
        outgoingDialogLayout.setVerticalGroup(
            outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outgoingDialogLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(amountOutgoing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reasonOutgoing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(outgoingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(noteOutgoing, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(addOutgoingDialog)
                .addGap(0, 0, 0))
        );

        browseFrame.setSize(browseFrameWidth,browseFrameHeight);
        browseFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        browseFrame.setResizable(false);

        tabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabbedPane.setFont(new java.awt.Font("KacstOne", 1, 72)); // NOI18N
        tabbedPane.setMinimumSize(new java.awt.Dimension(200, 200));
        tabbedPane.setOpaque(true);
        tabbedPane.setPreferredSize(new java.awt.Dimension(600, 296));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(102, 102, 255));
        jScrollPane1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(453, 403));

        incomingTable.setBackground(new java.awt.Color(204, 204, 255));
        incomingTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        incomingTable.setForeground(new java.awt.Color(102, 102, 255));
        incomingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "المعرف", "التاريخ", "المبلغ", "نوع السلعة", "مدفوعة أو لا", "طريقة الدفع", "ملاحظة"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        incomingTable.setMinimumSize(new java.awt.Dimension(75, 0));
        incomingTable.setName(""); // NOI18N
        incomingTable.setPreferredSize(new java.awt.Dimension(530, 0));
        incomingTable.setSelectionBackground(new java.awt.Color(153, 153, 255));
        incomingTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(incomingTable);
        if (incomingTable.getColumnModel().getColumnCount() > 0) {
            incomingTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            incomingTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            incomingTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            incomingTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            incomingTable.getColumnModel().getColumn(4).setPreferredWidth(80);
            incomingTable.getColumnModel().getColumn(6).setPreferredWidth(180);
        }

        totalIncoming.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        totalIncoming.setText("?");

        dailyIncoming.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        dailyIncoming.setText("jLabel9");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(dailyIncoming)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalIncoming)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalIncoming)
                    .addComponent(dailyIncoming))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("الإيرادات", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 85, 144));

        jScrollPane2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        outgoingTable.setBackground(java.awt.Color.pink);
        outgoingTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        outgoingTable.setForeground(java.awt.Color.red);
        outgoingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "المعرف", "التاريخ", "المبلغ", "السبب", "ملاحظة"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outgoingTable.setSelectionBackground(new java.awt.Color(255, 51, 51));
        outgoingTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(outgoingTable);
        if (outgoingTable.getColumnModel().getColumnCount() > 0) {
            outgoingTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            outgoingTable.getColumnModel().getColumn(1).setPreferredWidth(70);
            outgoingTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            outgoingTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            outgoingTable.getColumnModel().getColumn(4).setPreferredWidth(250);
        }

        totalOutgoing.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        totalOutgoing.setText("?");
        totalOutgoing.setToolTipText("");

        dailyOutgoing.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        dailyOutgoing.setText("jLabel9");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addComponent(dailyOutgoing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalOutgoing)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalOutgoing)
                    .addComponent(dailyOutgoing))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("المصروفات", jPanel3);

        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        addBill2.setBackground(new java.awt.Color(204, 204, 255));
        addBill2.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        addBill2.setForeground(new java.awt.Color(153, 153, 255));
        addBill2.setText("إضافة فاتورة جديدة");
        addBill2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBill2ActionPerformed(evt);
            }
        });

        addOutGoing2.setBackground(new java.awt.Color(255, 153, 153));
        addOutGoing2.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        addOutGoing2.setForeground(new java.awt.Color(255, 102, 102));
        addOutGoing2.setText("إضافة مصروفات جديدة");
        addOutGoing2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOutGoing2ActionPerformed(evt);
            }
        });

        fullReportBtn.setBackground(new java.awt.Color(255, 204, 102));
        fullReportBtn.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        fullReportBtn.setForeground(new java.awt.Color(204, 153, 0));
        fullReportBtn.setText("إنشاء تقرير شامل");
        fullReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullReportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addOutGoing2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBill2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fullReportBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(addBill2)
                .addGap(51, 51, 51)
                .addComponent(fullReportBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addOutGoing2)
                .addGap(97, 97, 97))
        );

        jLabel8.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        jLabel8.setText("تمت صناعة هذا التطبيق بواسطة : يزيد أحمد المقوشي");

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout browseFrameLayout = new javax.swing.GroupLayout(browseFrame.getContentPane());
        browseFrame.getContentPane().setLayout(browseFrameLayout);
        browseFrameLayout.setHorizontalGroup(
            browseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseFrameLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(browseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(browseFrameLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel8)
                        .addContainerGap())
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)))
        );
        browseFrameLayout.setVerticalGroup(
            browseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(browseFrameLayout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        tabbedPane.getAccessibleContext().setAccessibleName("");
        //tabbedPane.setBackgroundAt(0, Color.PINK);

        textFullReport.setEditable(false);
        textFullReport.setColumns(20);
        textFullReport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        textFullReport.setRows(5);
        jScrollPane3.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        textFullReport.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane3.setViewportView(textFullReport);

        printFullReport.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        printFullReport.setText("طباعة التقرير");
        printFullReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printFullReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fullReportDialogLayout = new javax.swing.GroupLayout(fullReportDialog.getContentPane());
        fullReportDialog.getContentPane().setLayout(fullReportDialogLayout);
        fullReportDialogLayout.setHorizontalGroup(
            fullReportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(fullReportDialogLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(printFullReport))
        );
        fullReportDialogLayout.setVerticalGroup(
            fullReportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullReportDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addComponent(printFullReport)
                .addGap(35, 35, 35))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addBill.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        addBill.setText("إضافة فاتورة جديدة");
        addBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
            }
        });

        browseBtn.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        browseBtn.setText("استعراض الإيرادات والمصروفات");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
            }
        });

        addOutGoing.setFont(new java.awt.Font("KacstOne", 1, 14)); // NOI18N
        addOutGoing.setText("اضافة مصروفات جديدة");
        addOutGoing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               
            }
        });

        about.setFont(new java.awt.Font("KacstOne", 1, 18)); // NOI18N
        about.setText("تم صنع التطبيق بواسطة : يزيد أحمد المقوشي");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(browseBtn)
                    .addComponent(addBill, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addOutGoing, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(about)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBill)
                .addGap(66, 66, 66)
                .addComponent(addOutGoing)
                .addGap(55, 55, 55)
                .addComponent(browseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(about)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
   

    
    
    private void initTextLines() {
        if (textLines == null) {
            int numLines=200;
            textLines = new String[numLines];
            for (int i=0;i<numLines;i++) {
                textLines[i]= "This is line number " + i;
            }
        }
    }
    
    //print method , not completed
    public int print(Graphics g, PageFormat pf, int pageIndex) throws PrinterException{
        Font font = new Font("KCastOne",Font.BOLD,16);
          FontMetrics metrics = g.getFontMetrics(font);
        int lineHeight = metrics.getHeight();

        if (pageBreaks == null) {
            initTextLines();
            int linesPerPage = (int)(pf.getImageableHeight()/lineHeight);
            int numBreaks = (textLines.length-1)/linesPerPage;
            pageBreaks = new int[numBreaks];
            for (int b=0; b<numBreaks; b++) {
                pageBreaks[b] = (b+1)*linesPerPage; 
            }
        }

        if (pageIndex > pageBreaks.length) {
            return NO_SUCH_PAGE;
        }

        /* User (0,0) is typically outside the imageable area, so we must
         * translate by the X and Y values in the PageFormat to avoid clipping
         * Since we are drawing text we
         */
        Graphics2D g2d = (Graphics2D)g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());

        /* Draw each line that is on this page.
         * Increment 'y' position by lineHeight for each line.
         */
        int y = 0; 
        int start = (pageIndex == 0) ? 0 : pageBreaks[pageIndex-1];
        int end   = (pageIndex == pageBreaks.length)
                         ? textLines.length : pageBreaks[pageIndex];
        for (int line=start; line<end; line++) {
            y += lineHeight;
            g.drawString(textLines[line], 0, y);
        }

        /* tell the caller that this page is part of the printed document */
        return PAGE_EXISTS;
        
    }
    
    

   

    

    //if the user clicked on add إضافة .. in incoming dialog , or if the user wanted to edit one spectfied incoming
    private void addIncomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIncomingActionPerformed
        // TODO add your handling code here:
         int amountInt;//the amount المبلغ
         if (addIncoming.getText().equals("إضافة")){ //if it's true , it will be adding new , not editing
        try {
         amountInt = Integer.parseInt(amountIncoming.getText());//parse the integer from the amount text
         amountInt = Math.abs(amountInt);//make it absolute faluse
      String categoryString = (String)  categoryIncoming.getSelectedItem();//the cateogry that the user choose it , as string
      String isPayedString = (String) isPayedIncoming.getSelectedItem();//is it payed ? as a string
      String payMethodString = (String)payMethodIncoming.getSelectedItem();// the pay method that it has been used , as string
      
      String noteString = noteIncoming.getText();//note as string
                Calendar c = Calendar.getInstance();//calender instance
                 
       
        String dateString = c.get(Calendar.YEAR) + "/" + c.get(Calendar.MONTH) + "/" + c.get(Calendar.DAY_OF_MONTH);//get date like xxxx/xx/xx
    
       DataBase.insertIntoTableIncoming(dateString, amountInt, categoryString,isPayedString ,payMethodString, noteString);//now insert it into table incoming of database
       
        
        JOptionPane.showMessageDialog(incomingDialog, "تمت إضافة الفاتورة بنجاح","تمت العملية بنجاح",JOptionPane.INFORMATION_MESSAGE);// show message dialog that everything is ok
        setTableContentIncoming();//refresh the table(interface) JTable
       
        amountIncoming.setText("");//reset the amount text
        noteIncoming.setText("");//reset the note text
        
        }
        
        catch (NumberFormatException e){  //if exception happend while parsing integer from amount text   
            JOptionPane.showMessageDialog(incomingDialog, "تأكد من المبلغ !!", "هنالك خطأ!!", JOptionPane.ERROR_MESSAGE);// show error dialog       
        }
         }
         
         else {//this block for editing spectfied incoming , not adding a new one
             try {
                 //all of them just like adding new one
                 amountInt = Integer.parseInt(amountIncoming.getText());
                 amountInt = Math.abs(amountInt);
                 String categoryString = (String) categoryIncoming.getSelectedItem();
                 String isPayedString = (String) isPayedIncoming.getSelectedItem();
                 String payMethodString = (String)payMethodIncoming.getSelectedItem();
                 String noteString = noteIncoming.getText();
                 
                 if (getSelectedRowIdIncoming() > -1)//just to be sure that user has selected a row in JTable
                 DataBase.editTableIncoming(getSelectedRowIdIncoming() , amountInt, categoryString, isPayedString,payMethodString, noteString);
                 
                 else {//if it's -1 , then close
                     return;
                 }
                 
                 JOptionPane.showMessageDialog(incomingDialog,"تم التعديل على الإيراد بنجاح","تم التعديل بنجاح", JOptionPane.INFORMATION_MESSAGE);//if the row has been successfully edited
                 setTableContentIncoming();//refresh the table (interface) JTable
                 amountIncoming.setText("");//reset
        noteIncoming.setText("");//reset
        addIncoming.setText("إضافة");//reset
        incomingDialog.setEnabled(false);//reset
                 
             }
             
             catch (NumberFormatException e ){//if something went wrong with parsing integer
                 e.printStackTrace();
                 JOptionPane.showMessageDialog(incomingDialog, "تأكد من المبلغ ","هنالك خطأ !!",JOptionPane.ERROR_MESSAGE);//show error dialog
             }
         }
         
    }//GEN-LAST:event_addIncomingActionPerformed


    //if the user click on add إضافة .. in outgoing dialog
    private void addOutgoingDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOutgoingDialogActionPerformed
        // TODO add your handling code here:
        
        
        int amount = 0;//defining amount
        
        if (addOutgoingDialog.getText().equals("إضافة")){//if it's adding new outgoing , not editing
        try {
            amount = Integer.parseInt(amountOutgoing.getText());//parse the amount from amount text
            amount = Math.abs(amount);//make it absolute value
            String reason = (String)reasonOutgoing.getSelectedItem();//the reason as string
            
            String note = (String)noteOutgoing.getText();//note as string
            
                 Calendar c = Calendar.getInstance();//calender instance
                 
        String dateString = c.get(Calendar.YEAR) + "/" + c.get(Calendar.MONTH) + "/" + c.get(Calendar.DAY_OF_MONTH);// date as string xxxx/xx/xx
  
        DataBase.insertIntoTableOutGoing(dateString, amount, reason, note);//now insert the outgoing data into outgoing table in database
            JOptionPane.showMessageDialog(incomingDialog, "تمت إضافة المصروفات بنجاح","تمت العملية بنجاح",JOptionPane.INFORMATION_MESSAGE);//show message if it's succes
            setTableContentOutgoing();//refresh the table in interface JTable
            
            amountOutgoing.setText("");//reset
            noteOutgoing.setText("");//reset
        }
        
        catch (NumberFormatException e){//if exception happend , show error dialog
            JOptionPane.showMessageDialog(incomingDialog, "تأكد من المبلغ !!", "هنالك خطأ!!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
        else { // if it's editing not adding a new outgoing
            try {
                //just like adding before
            amount = Integer.parseInt(amountOutgoing.getText());
            amount = Math.abs(amount);
            
            String reason = (String)reasonOutgoing.getSelectedItem();
            String note = (String)noteOutgoing.getText();
            
            if (getSelectedRowIdOutgoing() > -1)//if the user has selected a row in JTable
                DataBase.editTableOutgoing(getSelectedRowIdOutgoing(), amount, reason, note);
            
            else return ;//close if he hasn't choose
            
            JOptionPane.showMessageDialog(outgoingDialog, "تم التعديل على المصروفات بنجاح", "تمت العملية بنجاح", JOptionPane.INFORMATION_MESSAGE);//show succes dialog
            setTableContentOutgoing();//refresh outgoing table (Interface) JTable
            amountOutgoing.setText("");//reset
            noteOutgoing.setText("");//reset
            addOutgoingDialog.setText("إضافة");//reset
            outgoingDialog.setEnabled(false);//close outgoing dialog
            }
            
            catch (NumberFormatException e){// if exception happend
                 JOptionPane.showMessageDialog(incomingDialog, "تأكد من المبلغ ","هنالك خطأ !!",JOptionPane.ERROR_MESSAGE);//show error dialog
        }
        }
    }//GEN-LAST:event_addOutgoingDialogActionPerformed

    //if user has clicked on add new incoming button إضافة إيراد جديد .. in the main interface !!(browse frame)
    private void addBill2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBill2ActionPerformed
       
        
          incomingDialog.setBounds(browseFrame.getX(),browseFrame.getY() , incomingDialogWidth, incomingDialogHeight);//set bounds for the dialog
        incomingDialog.setEnabled(true);//make it enabled
        incomingDialog.setVisible(true);//set it visible to the user
    }//GEN-LAST:event_addBill2ActionPerformed

    //if the user has clicked on add new outgoing button button إضافة مصروفات جديدة .. in the main interface!!(browse frame)
    private void addOutGoing2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOutGoing2ActionPerformed
       
        
        outgoingDialog.setEnabled(true);//make it enabled
        outgoingDialog.setBounds(browseFrame.getX(), browseFrame.getY(), outgoingDialogWidth, outgoingDialogHeight);//set bounds for dialog
        outgoingDialog.setVisible(true);//set it visible to the user
    }//GEN-LAST:event_addOutGoing2ActionPerformed

    //if user has clicked on full report button تقرير شامل .. in the main interface !!(browse frame)
    private void fullReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullReportBtnActionPerformed
       
        DefaultTableModel incomingModel = (DefaultTableModel)incomingTable.getModel();//the model for table incoming (JTable)
        fullReportDialog.setBounds(browseFrame.getY(), browseFrame.getY(), fullReportDialogWidth, fullReportDialogHeight);//set the bounds for full report dialog
        fullReportDialog.setEnabled(true);//make it enabled
        
        String formatedTotalIncoming = String.format("%, d", totalIncomingDouble);//format the incomig total , exmaple : 192,43,54
        String formatedTotalOutgoing = String.format("%, d",totalOutgoingDouble);//format the outgoing total , exmaple : 192,43,54
        String formatedIncomingMinusOutgoing = String.format("%, d", (totalIncomingDouble - totalOutgoingDouble));////format the incoming total - outgoing total , exmaple : 192,43,54
        textFullReport.setText/*set text for text Full report in full report dialog*/
        ("عدد الأيام : " + DataBase.getTotalDaysIncoming() + "\n"//the count of days , then enter a new line
         + "إجمالي الإيرادات : " + formatedTotalIncoming + "\n" // total incoming , then enter a new line
                + "إجمالي الإيرادات (الشبكة) :" + DataBase.getTotalNetworkIncoming() + "\n" // total incoming that has entered by network شبكة , then enter a new line
                + "إجمالي الإيرادات (الكاش) : " + DataBase.getTotalCashIncoming() + "\n"//total incoming that has entered by cash كاش , then enter a new line
                + "معدل الإيراد اليومي : " + totalIncomingDouble/DataBase.getTotalDaysIncoming() + "\n"//get average incoming ,then enter a new line
                + "إجمالي المصروفات : " + formatedTotalOutgoing + "\n"//total outgoing , then enter a new line
                + "الصافي من الربح : " + formatedIncomingMinusOutgoing // net income 
                
                
        
        );
        
        fullReportDialog.setVisible(true);//make it visible to user
    }//GEN-LAST:event_fullReportBtnActionPerformed

    //if the user clicked on print button on full report dialog , incompleted !!
    private void printFullReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printFullReportActionPerformed
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
         job.setPrintable(this);
         boolean ok = job.printDialog();
         if (ok) {
             try {
                  job.print();
             } catch (PrinterException ex) {
              /* The job did not successfully complete */
             }
         }
    }//GEN-LAST:event_printFullReportActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountingMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AccountingMain().browseFrame.setVisible(true);//set the browse frame visible to user (main interface)
            }
        });
    }

    //set table incoming(JTable) and load rows into it
    private void setTableContentIncoming(){
        
       
        DefaultTableModel model = (DefaultTableModel)incomingTable.getModel();//get the model
       
      
        DataBase.setAllRowsIncoming(model);//add all the rows from incoming table in database
        int total = 0;//total for incoming
        totalIncoming.setText("");//total incoming Text in the browse frame(main interface) 
        for (int i = 0 ; i < model.getRowCount();i++){//repeat for every row
            int amount = (int)model.getValueAt(i, AccountingHelp.AMOUNT_ROW_INCOMING);//define amount for every row ,from amount column
            total += amount;//add amount to total
                    
        }
        try {
        int daily = total / model.getRowCount();//average incoming 
      
        
        totalIncomingDouble = total;//define total incoming
        totalIncoming.setText("الإجمالي = " + total);//set text for total incoming in Browse frame (main interface) 
        dailyIncoming.setText("الإيراد اليومي = " + daily); // set text for daily incoming in browse frame (main interface)
        }
        
        catch (ArithmeticException e ){//if daily = 0 or total
        //    e.printStackTrace();
              totalIncoming.setText("الإجمالي = " + 0);//set the text to 0
        dailyIncoming.setText("الإيراد اليومي = " + 0);//set the text to 0
        }
         incomingTable.setPreferredSize(new Dimension(530,model.getRowCount() * 16));//set the size for JTable incoming 
   
    }
    
    //set the JTable outgoing ,and load rows into it
    private void setTableContentOutgoing(){
        
        DefaultTableModel model = (DefaultTableModel)outgoingTable.getModel();// get the model
        
        DataBase.setAllRowsOutgoing(model);//add rows into outgoing JTable
        
        int total = 0;//define total
        totalOutgoing.setText("");//reset
        for (int i = 0 ; i < model.getRowCount();i++){//repeat for every row
            int amount = (int)model.getValueAt(i, AccountingHelp.AMOUNT_ROW_OUTGOING);//define amount for every row , from amount column
          total += amount;//add amount to total
        }
        
        try {
        int daily = total / model.getRowCount();//average outgoing
     
        
        totalOutgoingDouble = total;//define total outgoing
        
        totalOutgoing.setText("الإجمالي = " + total);//set total outgoing text in browse frame(main Interface)
        dailyOutgoing.setText("الصرف اليومي = " + daily);//set total outgoing text in browse frame(main Interface)
        }
        
        catch (ArithmeticException e){//if daily or total = 0
          //  e.printStackTrace();
            totalOutgoing.setText("الإجمالي = " + 0);//set the text to 0
        dailyOutgoing.setText("الصرف اليومي = " + 0);//set the text to 0
        }
     
    }
    
    
    // return the selected row (JTable)
    private int getSelectedRowIncoming(){
          ListSelectionModel selectModel = incomingTable.getSelectionModel();//get Selection model
      final DefaultTableModel model = (DefaultTableModel)incomingTable.getModel();//get default model for table incoming
      
      selectModel.addListSelectionListener(new ListSelectionListener(){//set up a listener

          @Override
          public void valueChanged(ListSelectionEvent e) {
              ListSelectionModel lsm = (ListSelectionModel)e.getSource();//list of selection

        int firstIndex = e.getFirstIndex();//first index of list selection
        int lastIndex = e.getLastIndex();//last index of list selection
        boolean isAdjusting = e.getValueIsAdjusting();//if the value is changing
      
        
        if (lsm.isSelectionEmpty()) {//if there's nothing selected
            System.out.println(" <none>");
            rowIncoming = -1;//reset
        } else {//if row is selected
            // Find out which indexes are selected.
            int minIndex = lsm.getMinSelectionIndex();//the min index for list
            int maxIndex = lsm.getMaxSelectionIndex();//the max index for list
            for (int i = minIndex; i <= maxIndex; i++) {//repeat until you get the selected row 
                if (lsm.isSelectedIndex(i)) {// 
                    
                  
                   rowIncoming = i;//define rowIncoming as i
             
                }

            }
        }
          }
      });
           
      return rowIncoming;
    }
    
    // return the id of the row to be used for database
    private int getSelectedRowIdIncoming (){
      ListSelectionModel selectModel = incomingTable.getSelectionModel();//get Selection model
      final DefaultTableModel model = (DefaultTableModel)incomingTable.getModel();//get Table model
      
      selectModel.addListSelectionListener(new ListSelectionListener(){//set up the listener

          @Override
          public void valueChanged(ListSelectionEvent e) {
              ListSelectionModel lsm = (ListSelectionModel)e.getSource();//get the list selection model 

        int firstIndex = e.getFirstIndex();//get first index
        int lastIndex = e.getLastIndex();//get last index
        boolean isAdjusting = e.getValueIsAdjusting();//if the value is changing
       
        
        if (lsm.isSelectionEmpty()) {//if nothing is selected
            System.out.println(" <none>");
            rowIdIncoming = -1;//reset
        } else {
            // Find out which indexes are selected.
            int minIndex = lsm.getMinSelectionIndex();//min index for list
            int maxIndex = lsm.getMaxSelectionIndex();//max index for list
            for (int i = minIndex; i <= maxIndex; i++) {//repeat until you get the selected row
                if (lsm.isSelectedIndex(i)) {
                    //now you got the row
                   Vector vector = (Vector) model.getDataVector().elementAt(i);//vector instance for row
                   rowIdIncoming = (int) vector.elementAt(AccountingHelp.ID_ROW_INCOMING);//now get the id of the row to be used for database
                 
                }

            }
        }
          }
      });
           
      return rowIdIncoming;
    }
    
    //returns the selected row (JTable),look at getSelectedRowIncoming (it's the same!!)
    private int getSelectedRowOutgoing (){
      ListSelectionModel selectModel = outgoingTable.getSelectionModel();
      final DefaultTableModel model = (DefaultTableModel)outgoingTable.getModel();
      
      selectModel.addListSelectionListener(new ListSelectionListener(){

          @Override
          public void valueChanged(ListSelectionEvent e) {
              ListSelectionModel lsm = (ListSelectionModel)e.getSource();

        int firstIndex = e.getFirstIndex();
        int lastIndex = e.getLastIndex();
        boolean isAdjusting = e.getValueIsAdjusting();
     
        
        if (lsm.isSelectionEmpty()) {
         //  System.out.println(" <none>");
            rowOutgoing = -1;
        } else {
            // Find out which indexes are selected.
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            for (int i = minIndex; i <= maxIndex; i++) {
                if (lsm.isSelectedIndex(i)) {
                    
                   
                   rowOutgoing = i;
                
                }

            }
        }
          }
      });
           
      return rowOutgoing;
    }
    
    
    
    //returns the selected row id to be used for database,look at getSelectedRowIdIncoming (it's the same!!)
     private int getSelectedRowIdOutgoing (){
      ListSelectionModel selectModel = outgoingTable.getSelectionModel();
      final DefaultTableModel model = (DefaultTableModel)outgoingTable.getModel();
      
      selectModel.addListSelectionListener(new ListSelectionListener(){

          @Override
          public void valueChanged(ListSelectionEvent e) {
              ListSelectionModel lsm = (ListSelectionModel)e.getSource();

        int firstIndex = e.getFirstIndex();
        int lastIndex = e.getLastIndex();
        boolean isAdjusting = e.getValueIsAdjusting();
      /*  System.out.println("Event for indexes "
                      + firstIndex + " - " + lastIndex
                      + "; isAdjusting is " + isAdjusting
                      + "; selected indexes:");*/
        
        if (lsm.isSelectionEmpty()) {
         //  System.out.println(" <none>");
            rowIdOutgoing = -1;
        } else {
            // Find out which indexes are selected.
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            for (int i = minIndex; i <= maxIndex; i++) {
                if (lsm.isSelectedIndex(i)) {
                    
                   Vector vector = (Vector) model.getDataVector().elementAt(i);
                   rowIdOutgoing = (int) vector.elementAt(AccountingHelp.ID_ROW_OUTGOING);
                
                }

            }
        }
          }
      });
           
      return rowIdOutgoing;
    }
    
   
     //set up the listener for right click , in icoming table and outgoing table
            private void setRightClickListener(){
                 
                incomingTable.addMouseListener(new MouseAdapter(){//add mouse listener for incoming table
                    
                    //for linux , and macOSx
                    @Override
                    public void mousePressed(MouseEvent e){
                       
                        int r = incomingTable.rowAtPoint(e.getPoint());//get the row
                         if (r >= 0 && r < incomingTable.getRowCount()) {//do a check
            incomingTable.setRowSelectionInterval(r, r);//set the selection
        } else {//clear the selection if the check didn't work well
            incomingTable.clearSelection();
        }

        int rowindex = incomingTable.getSelectedRow();//get selected row
        if (rowindex < 0)//do a check
            return;
        
        if (e.isPopupTrigger() && e.getComponent() instanceof JTable ) {//if the user has right clicked
            JPopupMenu popup = getMenu(true);//get Menu for incoming
            popup.show(e.getComponent(), e.getX(), e.getY());//show the popup menu
        }
                    }
                    
                    
                    //for windows,it's the same with above
                      @Override
                    public void mouseReleased(MouseEvent e){
                       
                        int r = incomingTable.rowAtPoint(e.getPoint());
                         if (r >= 0 && r < incomingTable.getRowCount()) {
            incomingTable.setRowSelectionInterval(r, r);
        } else {
            incomingTable.clearSelection();
        }

        int rowindex = incomingTable.getSelectedRow();
        if (rowindex < 0)
            return;
        
        if (e.isPopupTrigger() && e.getComponent() instanceof JTable ) {
       
            JPopupMenu popup = getMenu(true);
            popup.show(e.getComponent(), e.getX(), e.getY());
        }
                    }
                    
                });
                
                outgoingTable.addMouseListener(new MouseAdapter(){//it's the same with listener above
                    
                    @Override
                    public void mousePressed(MouseEvent e){
                        int r = outgoingTable.rowAtPoint(e.getPoint());
                         if (r >= 0 && r < outgoingTable.getRowCount()) {
            outgoingTable.setRowSelectionInterval(r, r);
        } else {
            outgoingTable.clearSelection();
        }

        int rowindex = outgoingTable.getSelectedRow();
        if (rowindex < 0)
            return;
        if (e.isPopupTrigger() && e.getComponent() instanceof JTable ) {
            JPopupMenu popup = getMenu(false);
            popup.show(e.getComponent(), e.getX(), e.getY());
        }
                    }
                    
                        @Override
                    public void mouseReleased(MouseEvent e){
                        int r = outgoingTable.rowAtPoint(e.getPoint());
                         if (r >= 0 && r < outgoingTable.getRowCount()) {
            outgoingTable.setRowSelectionInterval(r, r);
        } else {
            outgoingTable.clearSelection();
        }

        int rowindex = outgoingTable.getSelectedRow();
        if (rowindex < 0)
            return;
        if (e.isPopupTrigger() && e.getComponent() instanceof JTable ) {
            JPopupMenu popup = getMenu(false);
            popup.show(e.getComponent(), e.getX(), e.getY());
        }
                    }
                });
                
            }
    
            private JPopupMenu getMenu(final boolean isIncoming){
                JPopupMenu popup = new JPopupMenu();//define a new popup menu
                JMenuItem editItem = new JMenuItem("تعديل");//define a new popup menu item 
                editItem.addActionListener(new ActionListener(){//set up the listener for the popup menu item (edit)

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (isIncoming)//if it's incoming who calls this method
                       editIncoming();//show dialog to edit the row of outgoing
                        
                        else {//if it's outgoing
                            editOutgoing();//show dialog to edit the row of outgoing
                        }
                    }
                    
                });
                
                popup.add(editItem);//add edit item to the popup menu
                
                JMenuItem deleteItem = new JMenuItem("حذف");//define a new popup menu item
                deleteItem.addActionListener(new ActionListener(){//set up the listener for the popup menu item (delete)

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        
                        if (isIncoming){//if it's incoming who calls this method
                            deleteIncoming();//delete the row from database
                        }
                        
                        else {//if it's outgoing who calls this method
                            deleteOutgoing();//delete the row from database 
                        }
                    }
                    
                });
                
                
                popup.add(deleteItem);//add delete item to the popup menu
                
                return popup;
            }
    
            //show the dialog with data of selected row to edit the row , for incoming table
            private void editIncoming(){
                DefaultTableModel model = (DefaultTableModel)incomingTable.getModel();//get the model
                incomingDialog.setTitle("التعديل على الإيراد");//set the title for dialog
                incomingDialog.setVisible(false);//make it invisible to user
                int selectedRow = getSelectedRowIncoming();//get selected row (JTable)
           
                
                int amount = (int)model.getValueAt(selectedRow, AccountingHelp.AMOUNT_ROW_INCOMING);//get the amount from the selected row (JTable)
                amountIncoming.setText(amount + "");//set the text of amount in incoming dialog 
                
                String category = (String)model.getValueAt(selectedRow, AccountingHelp.CATEGORY_ROW_INCOMING);//get category from the selected row (JTable)
                categoryIncoming.setSelectedItem(category);//set the selected item of category in incoming dialog 
                
                String isPayed = (String) model.getValueAt(selectedRow, AccountingHelp.IS_PAYED_INCOMING);//get is payed from the selected row(JTable)
                isPayedIncoming.setSelectedItem(isPayed);//set the selected item of is Payed in incoming dialog 
                
                String payMethod = (String)model.getValueAt(selectedRow, AccountingHelp.PAY_METHOD_INCOMING);//get pay method from the selected row (JTable)
                payMethodIncoming.setSelectedItem(payMethod);//set the selected item of pay method in incoming dialog 
                
                String note = (String)model.getValueAt(selectedRow, AccountingHelp.NOTE_INCOMING);//get note from the selected row (JTable)
                noteIncoming.setText(note);//set the text of note in incoming dialog 
                
                addIncoming.setText("موافق");//set the add Incoming button in incoming dialog to ok موافق
                
                incomingDialog.setBounds(browseFrame.getX(),browseFrame.getY() , incomingDialogWidth, incomingDialogHeight);//set the bounds for incoming dialog
        incomingDialog.setEnabled(true);//make it enabled
        incomingDialog.setVisible(true);//make it visible to user
                
            }
            
            //show the dialog with of selected row to edit the row , for outgoing table
            private void editOutgoing(){
                DefaultTableModel model = (DefaultTableModel)outgoingTable.getModel();//get the model
                outgoingDialog.setTitle("التعديل على المصروفات");//set title for the dialog
                outgoingDialog.setVisible(false);//make it invisible to user
                
                int selectedRow = getSelectedRowOutgoing();//get the selected row (JTable)
                
                int amount = (int)model.getValueAt(selectedRow, AccountingHelp.AMOUNT_ROW_OUTGOING);//get amount from the selected row (JTable)
                amountOutgoing.setText(amount + "");//set the text amount in outgoing dialog
                
                String reason = (String)model.getValueAt(selectedRow, AccountingHelp.REASON_ROW_OUTGOING);//get reason from the selected row (JTable)
                reasonOutgoing.setSelectedItem(reason);//set reason selected item in outgoing dialog
                
                String note = (String)model.getValueAt(selectedRow, AccountingHelp.NOTE_ROW_OUTGOING);//get the note from the selected row (JTable)
                noteOutgoing.setText(note);//set note text in outgoing dialog
                
                addOutgoingDialog.setText("موافق");//set text for add outgoing button in outgoing dialog
                
                 outgoingDialog.setEnabled(true);//make it enabled
        outgoingDialog.setBounds(browseFrame.getX(), browseFrame.getY(), outgoingDialogWidth, outgoingDialogHeight);//set the bounds for outgoing dialog
        outgoingDialog.setVisible(true);//make it visible to user
                
            }
            
            //to delete a row from the database
            private void deleteIncoming(){
                int rowId = getSelectedRowIdIncoming();//get the row id for the database
                DataBase.deleteRowTableIncoming(rowId);//delete it from the database
                setTableContentIncoming();//refresh the table (JTable)
                
            }
            
            //to delete a row from the database
            private void deleteOutgoing(){
                int rowId = getSelectedRowIdOutgoing();//get the row id for the database
                DataBase.deleteRowTableOutgoing(rowId);//delete it from the database
                setTableContentOutgoing();//refresh the table (JTable)
            }
            
            //set titles for dialogs and frames
            private void setTitles() {
       browseFrame.setTitle("مملكة الورود : النسخة التجريبية 0.1");//set the title for main interface (Browse frame)
       incomingDialog.setTitle("إضافة إيرادات جديدة");//set the title for incoming dialog
       outgoingDialog.setTitle("إضافة مصروفات جديدة");//set the title for outgoing dialog
       
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel about;
    private javax.swing.JButton addBill;
    private javax.swing.JButton addBill2;
    private javax.swing.JButton addIncoming;
    private javax.swing.JButton addOutGoing;
    private javax.swing.JButton addOutGoing2;
    private javax.swing.JButton addOutgoingDialog;
    private javax.swing.JTextField amountIncoming;
    private javax.swing.JTextField amountOutgoing;
    private javax.swing.JButton browseBtn;
    private javax.swing.JFrame browseFrame;
    private javax.swing.JComboBox categoryIncoming;
    private javax.swing.JLabel dailyIncoming;
    private javax.swing.JLabel dailyOutgoing;
    private javax.swing.JButton fullReportBtn;
    private javax.swing.JDialog fullReportDialog;
    private javax.swing.JDialog incomingDialog;
    private javax.swing.JTable incomingTable;
    private javax.swing.JComboBox isPayedIncoming;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField noteIncoming;
    private javax.swing.JTextField noteOutgoing;
    private javax.swing.JDialog outgoingDialog;
    private javax.swing.JTable outgoingTable;
    private javax.swing.JComboBox payMethodIncoming;
    private javax.swing.JButton printFullReport;
    private javax.swing.JComboBox reasonOutgoing;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextArea textFullReport;
    private javax.swing.JLabel totalIncoming;
    private javax.swing.JLabel totalOutgoing;
    // End of variables declaration//GEN-END:variables

    

    
}
